<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!--
    Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
    <class name="com.meijer.foodlab.model.domain.Promotion" table="fl_promotion">
        <id name="promotionId" type="java.lang.Integer">
            <column name="promotion_id" />
            <generator class="native" />
        </id>        
        <discriminator type="java.lang.String">
        	<column name="special" length="24" />
        </discriminator>
        <version name="version" column="version" type="long" insert="true"/>
        <property name="code" type="java.lang.String">
        	<column name="code" not-null="false"/>
        </property>
        <property name="title" type="java.lang.String">
            <column name="title" not-null="false" />
        </property>
        <property name="description" type="java.lang.String">
            <column name="description" not-null="false" />
        </property>
        <property name="type" type="java.lang.String">
            <column name="type" not-null="false" />
        </property>
        <property name="additional" type="java.lang.String">
            <column name="additional" not-null="false" />
        </property>
        <property name="listingDeal" type="java.lang.String">
            <column name="listing_deal" not-null="false" />
        </property>
        <property name="originalPrice" type="java.lang.String">
            <column name="original_price" not-null="false" />
        </property>
        <property name="finalPrice" type="java.lang.String">
            <column name="final_price" not-null="false" />
        </property>
        <property name="finePrint" type="java.lang.String">
            <column name="fine_print" not-null="false" />
        </property>
        <property name="activationDate" type="java.util.Date">
            <column name="activation_date" length="19" not-null="true" />
        </property>
        <property name="expirationDate" type="java.util.Date">
            <column name="expiration_date" length="19" not-null="true" />
        </property>
        <property name="image" type="java.lang.String">
            <column name="image" />
        </property>
        <property name="imageUrl" type="java.lang.String">
            <column name="image_url" />
        </property>
    	<property name="printImage" type="java.lang.String">
    		<column name="print_image" />
    	</property>
    	<property name="barcodeImage" type="java.lang.String">
    		<column name="barcode_image" />
    	</property>
        <property name="status" type="com.meijer.foodlab.persistence.hibernate.usertype.PromotionStatusUserType">
            <column name="status" not-null="true" />
        </property>
        <property name="special" type="java.lang.Boolean" insert="false" update="false">
            <column name="special" />
        </property>
        <property name="batchId" type="java.lang.Integer">
            <column name="batch_id" />
        </property>
    	<property name="externalId" type="java.lang.String">
    		<column name="external_id" not-null="true" />
    	</property>
    	<many-to-one name="chain" class="com.meijer.foodlab.model.domain.Chain" fetch="select" lazy="false">
    		<column name="chain_id" length="11" />
    	</many-to-one>    	
    	<property name="createdBy" type="java.lang.String">
    		<column name="created_by" />
    	</property>
    	<property name="lastUpdatedBy" type="java.lang.String">
    		<column name="last_updated_by" />
    	</property>
        <property name="lastUpdate" type="java.util.Date" update="false" insert="false">
            <column name="last_update" length="19" not-null="true" />
        </property>
        <property name="created" type="java.util.Date" update="false">
            <column name="created" length="19" not-null="true" />
        </property>
        <set name="ingredientPromotions" inverse="true" cascade="all" lazy="false" fetch="join">
            <key>
                <column name="promotion_id" not-null="true" />
            </key>
            <one-to-many class="com.meijer.foodlab.model.domain.IngredientItemPromotion" />
        </set>
        <set name="promotionCategory" table="fl_promotion_category_membership" cascade="none" fetch="join" lazy="false">
            <key column="promotion_id"/>
            <many-to-many column="promotion_category_id"
                unique="true" class="com.meijer.foodlab.model.domain.PromotionCategory"/>
        </set>
    	<set name="stores" table="fl_store_promotion" cascade="save-update" lazy="false">
    		<key column="promotion_id" not-null="true"/>
    		<many-to-many column="store_id"
    			unique="true"
    			class="com.meijer.foodlab.model.domain.Store"/>
    	</set>
    </class>
    <subclass name="com.meijer.foodlab.model.domain.Coupon"	discriminator-value="0"
    		extends="com.meijer.foodlab.model.domain.Promotion">
    	<many-to-one name="brand" class="com.meijer.foodlab.model.domain.Brand" fetch="select" lazy="false">
    		<column name="brand_id" length="11" />
    	</many-to-one>
    </subclass>
    <subclass name="com.meijer.foodlab.model.domain.Special" discriminator-value="1"
    		extends="com.meijer.foodlab.model.domain.Promotion">
    	<set name="oneStops" table="fl_onestop_promotion_membership" cascade="none" lazy="true">
    		<key column="promotion_id"/>
    		<many-to-many column="onestop_id"
    			unique="true" class="com.meijer.foodlab.model.domain.OneStop"/>
    	</set>
    </subclass>
    <query name="getItemPromotions">
   		select promotion, recipeIng.ingredient.ingredientId 
   		from Recipe this 
   		join this.recipeIngredients as recipeIng 
		join recipeIng.ingredient.ingredientItem.ingredientItemPromotions as ingredientItemPromotion 
		join ingredientItemPromotion.promotion as promotion
		left join promotion.stores as store  
		left join promotion.brand as brand
		where  this.recipeId = :pRecipeId
		and promotion.special is not true
		and this.prepared is not true 
		and (store.storeId IS NULL and brand.chain.id IS NULL)
		and promotion.status = :pStatus 
		and (current_date() between date(promotion.activationDate) and date(promotion.expirationDate))
		order by promotion.id
    </query>
	<query name="getItemPromotionsByStoreId">
    select promotion, recipeIng.ingredient.ingredientId 
   		from Recipe this 
   		join this.recipeIngredients as recipeIng 
		join recipeIng.ingredient.ingredientItem.ingredientItemPromotions as ingredientItemPromotion 
		join ingredientItemPromotion.promotion as promotion
		left join promotion.stores as store 
		left join promotion.brand as brand
		where  this.recipeId = :pRecipeId
		and (
			(promotion.special is true and store.unitId = :pStoreId)
			or 
			(promotion.special is not true and (store.unitId = :pStoreId OR store.storeId IS NULL) and (brand.chain.id = :pChainId or brand.chain.id is null))
		) 
		and this.prepared is not true
		and promotion.status = :pStatus 
		and (current_date() between date(promotion.activationDate) and date(promotion.expirationDate))
		order by promotion.id
	</query>
    <query name="getNonSpecialItemPromotions">
		select ingredientItemPromotion.promotion, recipeIng.ingredient.ingredientId,upcIngredient.upc from Recipe this join this.recipeIngredients as recipeIng 
		join recipeIng.ingredient.ingredientItem.ingredientItemPromotions as ingredientItemPromotion 
		left join ingredientItemPromotion.promotion.stores as store 
		join recipeIng.ingredient.ingredientItem.upcIngredients as upcIngredient 
		where this.recipeId = :pRecipeId and store.storeId is NULL and ingredientItemPromotion.promotion.special = false and ingredientItemPromotion.promotion.status = :pStatus 
		and (current_date() between date(ingredientItemPromotion.promotion.activationDate) and date(ingredientItemPromotion.promotion.expirationDate))
		group by ingredientItemPromotion.promotion.id
		order by ingredientItemPromotion.promotion.id
    </query>
    <query name="getNonSpecialItemPromotionsByStoreId">
   		select ingredientItemPromotion.promotion, recipeIng.ingredient.ingredientId,upcIngredient.upc from Recipe this join this.recipeIngredients as recipeIng 
		join recipeIng.ingredient.ingredientItem.ingredientItemPromotions as ingredientItemPromotion 
		left join ingredientItemPromotion.promotion.stores as store 
		join recipeIng.ingredient.ingredientItem.upcIngredients as upcIngredient 
		where this.recipeId = :pRecipeId and (store.unitId = :pStoreId OR store.storeId IS NULL) and ingredientItemPromotion.promotion.special = false and ingredientItemPromotion.promotion.status = :pStatus 
		and (current_date() between date(ingredientItemPromotion.promotion.activationDate) and date(ingredientItemPromotion.promotion.expirationDate)  )
		group by ingredientItemPromotion.promotion.id
		order by ingredientItemPromotion.promotion.id
    </query>
    <query name="findPromotionsforIngredientsStoreIdNull">
		select promotion, this.ingredientId 
		from Ingredient this 
		join this.ingredientItem.ingredientItemPromotions as ingredientPromotion 
		left join ingredientPromotion.promotion as promotion
		left join promotion.stores as store 
		left join promotion.brand as brand
		where this.ingredientId in (:pIngredientIds) 
		and promotion.special is not true 
		and (store.storeId IS NULL and brand.chain.id IS NULL)
		and promotion.status = :pStatus 
		and (current_date() between date(promotion.activationDate) and date(promotion.expirationDate))
		order by promotion.id
  </query>
	<query name="findPromotionsforStoreId">
		select promotion, this.ingredientId 
		from Ingredient this 
		join this.ingredientItem.ingredientItemPromotions as ingredientPromotion 
		left join ingredientPromotion.promotion as promotion
		left join promotion.stores as store
		left join promotion.brand as brand 
		where 
		 (
			(promotion.special is true and store.unitId = :pStoreId)
			or 
			(promotion.special is not true and (store.unitId = :pStoreId OR store.storeId IS NULL) and (brand.chain.id = :pChainId OR brand.chain.id IS NULL))
		) 
		and promotion.status = :pStatus 
		and (current_date() between date(promotion.activationDate) and date(promotion.expirationDate))
		order by promotion.id
    </query>
     <query name="findPromotionsforIngredientsStoreId">
		select promotion, this.ingredientId 
		from Ingredient this 
		join this.ingredientItem.ingredientItemPromotions as ingredientPromotion 
		left join ingredientPromotion.promotion as promotion
		left join promotion.stores as store 
		left join promotion.brand as brand 
		where this.ingredientId in (:pIngredientIds) 
		and (
			(promotion.special is true and store.unitId = :pStoreId)
			or 
			(promotion.special is not true and (store.unitId = :pStoreId OR store.storeId IS NULL) and (brand.chain.id = :pChainId OR brand.chain.id IS NULL))
		) 
		and promotion.status = :pStatus 
		and (current_date() between date(promotion.activationDate) and date(promotion.expirationDate)) 
		order by promotion.id
	</query>
    <query name="findByInfo">
        select promotion from Promotion promotion where promotion.externalId = :pExternalId
    </query>
	<query name="findByDescription">
		select promotion from Promotion promotion where promotion.description = :pDescription and promotion.status not in ('DELETED')
	</query>
	<query name="promotion.coupons_inc_coupons">
		select promotion from Promotion promotion where promotion.type = 'COUPONS_INC' and promotion.status = 'ACTIVE'
	</query>
	
</hibernate-mapping>